export declare class ERR_HTTP_HEADERS_SENT extends Error {
    constructor(arg: string);
}
export declare class ERR_INVALID_ARG_VALUE extends TypeError {
    constructor(name: string, value: any, reason?: string);
}
export declare class ERR_INVALID_CHAR extends TypeError {
    constructor(name: string, field?: string);
}
export declare class ERR_HTTP_INVALID_HEADER_VALUE extends TypeError {
    constructor(value: string | undefined, name: string);
}
export declare class ERR_HTTP_INVALID_STATUS_CODE extends RangeError {
    originalStatusCode: number;
    constructor(originalStatusCode: number);
}
export declare class ERR_HTTP_TRAILER_INVALID extends Error {
    constructor();
}
export declare class ERR_INVALID_ARG_TYPE extends TypeError {
    constructor(name: string, expected: string | string[], actual: any);
}
export declare class ERR_INVALID_HTTP_TOKEN extends TypeError {
    constructor(name: string, field: string);
}
export declare class ERR_METHOD_NOT_IMPLEMENTED extends Error {
    constructor(methodName: string);
}
export declare class ERR_STREAM_ALREADY_FINISHED extends Error {
    constructor(methodName: string);
}
export declare class ERR_STREAM_CANNOT_PIPE extends Error {
    constructor();
}
export declare class ERR_STREAM_DESTROYED extends Error {
    constructor(methodName: string);
}
export declare class ERR_STREAM_NULL_VALUES extends TypeError {
    constructor();
}
export declare class ERR_STREAM_WRITE_AFTER_END extends Error {
    constructor();
}
//# sourceMappingURL=errors.d.ts.map